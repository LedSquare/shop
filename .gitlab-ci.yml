default:
  tags:
    - docker

variables:
  image_path: "freelance/vkbot/backend"

stages:
  - build
  - deploy
  - notify

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      variables:
        ip: "10.16.2.184"
        port: "22"
        env_config_name: ".env.example"
        username: "user"
        app_dir: "/app/vkbot"
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        ip: ""
        port: "22"
        env_config_name: ".env.example"
        username: "user"
        app_dir: "/app/anysong"

build-redis:
  stage: build
  image: docker
  script:
    - echo "Building redis..."
    - docker login -u at -p $DEPLOY_TOKEN $REGISTRY
    - docker build . -f docker/redis/Dockerfile -t $REGISTRY/$image_path/redis:$CI_COMMIT_BRANCH
    - docker push $REGISTRY/$image_path/redis:$CI_COMMIT_BRANCH
  only:
    changes:
      - docker/redis/**/*
    variables:
      - $ip

build-image:
  stage: build
  image: docker
  script:
    - echo "Building application..."
    - docker login -u at -p $DEPLOY_TOKEN $REGISTRY
    - docker build . -f docker/app/Dockerfile -t $REGISTRY/$image_path/app:$CI_COMMIT_BRANCH
    - docker push $REGISTRY/$image_path/app:$CI_COMMIT_BRANCH
  only:
    variables:
      - $ip
    changes:
      - laravel/**/*
      - docker/app/**/*

deploy-job:
  stage: deploy
  image: alpine
  script:
    - echo "Deploying application..."
    - chmod 600 $ACCESS_KEY
    - apk update && apk add openssh
    - scp -i $ACCESS_KEY -P $port -o StrictHostKeyChecking=no docker-compose.yml $username@$ip:$app_dir
    - ssh -i $ACCESS_KEY -p $port -o StrictHostKeyChecking=no $username@$ip "docker login -u at -p $DEPLOY_TOKEN $REGISTRY"
    - ssh -i $ACCESS_KEY -p $port -o StrictHostKeyChecking=no $username@$ip "cd $app_dir; docker-compose pull"
    - ssh -i $ACCESS_KEY -p $port -o StrictHostKeyChecking=no $username@$ip "cd $app_dir; docker-compose up -d"
    - ssh -i $ACCESS_KEY -p $port -o StrictHostKeyChecking=no $username@$ip "cd $app_dir; docker-compose exec app php artisan migrate:fresh"
    - echo "Cleaning..."
    - ssh -i $ACCESS_KEY -p $port -o StrictHostKeyChecking=no $username@$ip "docker system prune -a -f"
  only:
    variables:
      - $ip
      
notify_error:
    stage: notify
    image: alpine
    script:
        - apk update && apk add curl
        - curl -s -X POST https://api.telegram.org/bot$TG_TOKEN/sendMessage -F chat_id=$TG_CHATID -F message_thread_id=$THREAD_ID -F text="‚ùå backend-pipeline failed $CI_PIPELINE_URL"
    when: on_failure